# -*- coding: utf-8 -*-
"""2019_09_06_pd_np_plt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fEkcgt74CUhnNDoBeckdhZ_F7vnS4-9y

# Phase 1
#### Segmentation
TOP 3 Segments

## Find the best Target Segments and Locations for a New Security System
### Electric Growers wants to launch a New Home Security System utilizing the right strategy.

The project provides the best way to launch a new Home Security System targeting socio-economic segments which have the highest new customers potential.

It is a result of an in-depth analysis of the customer data including several variables as a collected survey questions in 6759 markets of US cities/regions.

### Import Libraries and Datasets
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/gdrive/')

"""Download the datasets and read it all into a pandas dataframe."""

# survey - Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey = pd.read_csv("/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/01_survey_data.csv", sep = ',', low_memory=False)
# segments - Segments and their description
df_segments = pd.read_csv("/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/02_city_segments.csv", sep = ',', low_memory=False)
# demographics - Market data will have attributes like combine crime rate, population growth, housing growth and penetration of top segments at state city level
df_demographics = pd.read_csv("/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/03_citywise_demographics.csv", sep = ',', low_memory=False)

df_survey.shape, list(df_survey), df_survey.notnull().sum()

# survey - Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey.head(5)

df_survey['Variable Count'] = df_survey['Variable Count'].astype(int)

df_survey['Variable Count'].sum()

df_segments.shape, list(df_segments), df_segments.notnull().sum()

# segments - Segments and their description
df_segments.head(5)

df_demographics.shape, list(df_demographics), df_segments.notnull().sum()

# Demographics - Market data will have attributes like combine crime rate, population growth, housing growth and penetration of top segments at state city level
df_demographics.head(5)

"""# Exploratory Data Analysis

#### Segmentation - Top segments and their description
Methodology: 
- Select variables providing the right attributes from the Survey Data
- Calculate the penetration of variable data for segments
- Using the index, identify the top 3 segments to target
"""

# On survey: list unique segment names
 df_survey["Segments"].unique().tolist()

# On survey: list unique Variable Names(Key Atribbutes)
 df_survey["Variable Name"].unique().tolist()

"""####Based on discussions with Stakeholders, 5 Key Attributes are selected Determine Top Segments

1. Household counts
2. Wants to buy security devices
3. Will switch brands
4. High(750-2M) and Medium(100-749K) IPA (Income Producing Asset)
5. Willing to pay more for top quality electronics
----------------------------------------------------------
#### Final Segmentation
Combined survey and segments dataset generated for further analysis

### 1.Household counts
"""

# From Segments and their description
df_segments.head(5)

df_segments_hc = df_segments.drop(['StateFullName','City'], axis=1)

df_segments_hc = df_segments_hc.rename(columns={'Customer Segment': 'Segments'})

df_segments_hc.head(5)

# Segments X Household Counts

df_segments_hc_seg = df_segments_hc.groupby('Segments')[['Household Counts']].sum()

df_segments_hc_seg

"""### 2.Wants to buy security devices"""

# From Survey Data
# Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey_wb = df_survey[df_survey['Segments'].str.contains('') & df_survey['Variable Name'].str.contains('Would like to buy')]

df_survey_wb.head(15)

df_survey_wb['Variable Count'].sum()

df_survey_wb['Variable Name'].unique().tolist()

df_survey_wb = df_survey_wb.rename(columns={'Variable Count': 'Wants to buy Security Devices'})

# Segments X Wants to buy Security Devices
df_survey_wb_seg = df_survey_wb.groupby('Segments')[['Wants to buy Security Devices']].sum()

df_survey_wb_seg

pd.concat([df_segments_hc_seg, df_survey_wb_seg], axis=1)

"""### 3.Will Switch brands"""

# From Survey Data
# Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey_ws = df_survey[df_survey['Segments'].str.contains('') & df_survey['Variable Name'].str.contains('Will Switch Brands')]

df_survey_ws.head(15)

df_survey_ws['Variable Count'].sum()

df_survey_ws['Variable Name'].unique().tolist()

df_survey_ws = df_survey_ws.rename(columns={'Variable Count': 'Will Switch Brands'})

# Segments X Will Switch Brands
df_survey_ws_seg = df_survey_ws.groupby('Segments')[['Will Switch Brands']].sum()

df_survey_ws_seg

pd.concat([df_segments_hc_seg, df_survey_wb_seg, df_survey_ws_seg], axis=1)

"""### 4.High(750-2M) and Medium(100-749K) IPA(Income Producing Asset)"""

# From Survey Data
# Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey_ipa = df_survey[df_survey['Segments'].str.contains('') & df_survey['Variable Name'].str.contains('IPA')]

df_survey_ipa['Variable Name'].unique().tolist()

df_survey_ipa = df_survey_ipa.set_index("Variable Name")
df_survey_ipa = df_survey_ipa.drop(['IPA $25K-$49K',
                                    'IPA $50K-$74K',
                                    'IPA $75K-$99K',
                                    'IPA < $25K'], axis=0)
df_survey_ipa = df_survey_ipa.set_index("Segments")

df_survey_ipa

df_survey_ipa = df_survey_ipa.rename(columns={'Variable Count': 'High & Medium IPA'})

# Segments X High & Medium IPA
df_survey_ipa_seg = df_survey_ipa.groupby('Segments')[['High & Medium IPA']].sum()

df_survey_ipa_seg

pd.concat([df_segments_hc_seg, df_survey_wb_seg, df_survey_ws_seg, df_survey_ipa_seg], axis=1)

"""### 5.Willing to pay more for top quality electronics"""

# From Survey Data
# Survey Data will have the segment distribution for the variables providing the right attribute which will be used to calculate propensity indices for the segments or markets
df_survey_wp = df_survey[df_survey['Segments'].str.contains('') & df_survey['Variable Name'].str.contains('Pay More')]

df_survey_wp.head(15)

df_survey_wp['Variable Count'].sum()

df_survey_wp['Variable Name'].unique().tolist()

df_survey_wp = df_survey_wp.rename(columns={'Variable Count': 'Pay more to buy Top Quality Electronics'})

# Segments X Pay more to buy Top Quality Electronics
df_survey_wp_seg = df_survey_wp.groupby('Segments')[['Pay more to buy Top Quality Electronics']].sum()

df_survey_wp_seg

pd.concat([df_segments_hc_seg, df_survey_wb_seg, df_survey_ws_seg, df_survey_ipa_seg, df_survey_wp_seg], axis=1)

"""### Final Segmentation
Combined survey and segments dataset generated for further analysis
"""

# Dataset ready for further analysis
df_segmentation = pd.concat([df_segments_hc_seg, df_survey_wb_seg, df_survey_ws_seg, df_survey_ipa_seg, df_survey_wp_seg], axis=1)

df_segmentation

# After Dataframe df_segmentation created, save as(write) .csv file to plot visualization
df_segmentation.to_csv(r"/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/04_segmentation.csv", sep = ',')

# Connect to Tabpy
# pip install tabpy

# Commented out IPython magic to ensure Python compatibility.
# %%HTML
# <div style="border-right: 600px solid WhiteSmoke;"><div style="border-left: 100px solid WhiteSmoke;"><div style="border-top: 20px solid WhiteSmoke;"><div style="border-bottom: 20px solid WhiteSmoke;"><param name="showShareOptions" value="false" />
# <div class='tableauPlaceholder' id='viz1568508408660' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_01_df_segmentation_15685006350930&#47;Dashboard&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name="showShareOptions" value="false" /><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='2019_09_06_pd_01_df_segmentation_15685006350930&#47;Dashboard' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_01_df_segmentation_15685006350930&#47;Dashboard&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1568508408660');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='800px';vizElement.style.height='727px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>

# Rescale them to the same magnitude
df_segmentation_per.loc[:,:]= df_segmentation.loc[:,:]/df_segmentation.loc[:,:].sum()
df_segmentation_per.round(2)

# Percentage share of segments in each attribute
df_segmentation_per.to_csv(r"/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/05_segmentation_perc.csv", sep = ',')

# Commented out IPython magic to ensure Python compatibility.
# %%HTML
# <div style="border-right: 600px solid WhiteSmoke;"><div style="border-left: 100px solid WhiteSmoke;"><div style="border-top: 20px solid WhiteSmoke;"><div style="border-bottom: 20px solid WhiteSmoke;"><param name="showShareOptions" value="false" />
# <div class='tableauPlaceholder' id='viz1568567918402' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_01_df_segmentation_perc&#47;Dashboard2&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name="showShareOptions" value="false" /><param name='name' value='2019_09_06_pd_01_df_segmentation_perc&#47;Dashboard2' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_01_df_segmentation_perc&#47;Dashboard2&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1568567918402');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='800px';vizElement.style.height='427px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>

# Weighted scoring method
# Based on relevance degree, apply appropriate weights to variables to calculate final weighted average scores
df_segmentation_we_25 = df_segmentation_per[['Household Counts','Will Switch Brands']]*0.25
df_segmentation_we_10 = df_segmentation_per[['High & Medium IPA','Pay more to buy Top Quality Electronics']]*0.10
df_segmentation_we_30 = df_segmentation_per[['Wants to buy Security Devices']]*0.30

df_segmentation_we = pd.concat([df_segmentation_we_25, df_segmentation_we_10, df_segmentation_we_30], axis=1)
df_segmentation_we = df_segmentation_we[['Household Counts',
 'Wants to buy Security Devices',
 'Will Switch Brands',
 'High & Medium IPA',
 'Pay more to buy Top Quality Electronics']]
df_segmentation_we['Total'] = df_segmentation_we.sum(axis=1)
df_segmentation_we.sort_values('Total', axis = 0, ascending = False, 
                 inplace = True, na_position ='last')

df_segmentation_we.to_csv(r"/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/06_segmentation_perc_we.csv", sep = ',')

df_segmentation_we = pd.read_csv("/gdrive/My Drive/Colab Notebooks/Data/PROJ/01_pandas/files/final/data/06_segmentation_perc_we.csv", sep = ',', low_memory=False)
df_segmentation_we.sort_values('Total', axis = 0, ascending = False, 
                 inplace = True, na_position ='last')
df_segmentation_we = df_segmentation_we.round(3)
df_segmentation_we

"""#### Segmentation Criteria

After applied the appropriate weights to the variables a total weighted score results the Top 3 Customer Segments to target:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%HTML
# <iframe width="420" height="436" src="https://app.powerbi.com/view?r=eyJrIjoiMTAwODYzOWYtYzY5ZC00NjJmLTljZTAtMmJhYmVkMGE0ZDdkIiwidCI6ImMzYTZiMzgzLTg0ZjctNDYyYi1hMWEzLTlhODU0M2EzYzMyYSIsImMiOjZ9" frameborder="0" allowFullScreen="true"></iframe>

# Commented out IPython magic to ensure Python compatibility.
# %%HTML
# <div style="border-right: 600px solid WhiteSmoke;"><div style="border-left: 100px solid WhiteSmoke;"><div style="border-top: 20px solid WhiteSmoke;"><div style="border-bottom: 20px solid WhiteSmoke;"><param name="showShareOptions" value="false" />
# <div class='tableauPlaceholder' id='viz1568580100057' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_top3&#47;Dashboard1&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name="showShareOptions" value="false" /><param name='name' value='2019_09_06_pd_top3&#47;Dashboard1' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_top3&#47;Dashboard1&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1568580100057');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='800px';vizElement.style.height='327px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>

"""#### TOP 3 Segments - Closer Look"""

# Commented out IPython magic to ensure Python compatibility.
# %%HTML
# <div style="border-right: 600px solid WhiteSmoke;"><div style="border-left: 100px solid WhiteSmoke;"><div style="border-top: 20px solid WhiteSmoke;"><div style="border-bottom: 20px solid WhiteSmoke;"><param name="showShareOptions" value="false" />
# <div class='tableauPlaceholder' id='viz1568593199349' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_dash&#47;Top3Segments&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='path' value='views&#47;2019_09_06_pd_dash&#47;Top3Segments?:embed=y&amp;:display_count=y&amp;publish=yes' /> <param name='toolbar' value='yes' /><param name="showShareOptions" value="false" /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;20&#47;2019_09_06_pd_dash&#47;Top3Segments&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1568593199349');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='800px';vizElement.style.height='527px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='800px';vizElement.style.height='527px';} else { vizElement.style.width='100%';vizElement.style.height='1077px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>